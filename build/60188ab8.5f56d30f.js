(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{113:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return b})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return o}));var a=n(1),r=(n(0),n(131));const c={id:"fundamentals",title:"Fundamentals",sidebar_label:"Fundamentals"},b={id:"fundamentals",title:"Fundamentals",description:"## Including the Library\r",source:"@site/docs\\fundamentals.md",permalink:"/docs/fundamentals",editUrl:"https://github.com/COVISART/SimulatorUserGuid/docs/fundamentals.md",sidebar_label:"Fundamentals",sidebar:"someSidebar",previous:{title:"Poll vs External Interrupts",permalink:"/docs/poll-vs-external-interrupts"},next:{title:"User Guid",permalink:"/docs/userguid"}},l=[{value:"Including the Library",id:"including-the-library",children:[]},{value:"EasyButton Class",id:"easybutton-class",children:[{value:"Arguments",id:"arguments",children:[]}]},{value:"Initializing a button",id:"initializing-a-button",children:[]},{value:"Update Button State",id:"update-button-state",children:[{value:"Poll",id:"poll",children:[]},{value:"External interrupts",id:"external-interrupts",children:[]}]},{value:"Callbacks",id:"callbacks",children:[]}],i={rightToc:l};function o({components:e,...t}){return Object(r.b)("wrapper",Object(a.a)({},i,t,{components:e,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"including-the-library"},"Including the Library"),Object(r.b)("p",null,"Once the library has been installed, you may include it as shown below."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp"}),"#include <EasyButton.h>\n")),Object(r.b)("h2",{id:"easybutton-class"},"EasyButton Class"),Object(r.b)("p",null,"The library exposes the ",Object(r.b)("strong",{parentName:"p"},"EasyButton")," class. Create an instance of the class for every button that you have connected."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp"}),"#define PWR_BTN_PIN 26\n\n#define RST_BTN_PIN 27\n\nEasyButton powerButton(PWR_BTN_PIN);\n\nEasyButton resetButton(RST_BTN_PIN);\n")),Object(r.b)("h3",{id:"arguments"},"Arguments"),Object(r.b)("p",null,"The following arguments can be passed to the class constructor."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp"}),"#define PWR_BTN_PIN 26\n\nuint8 debounce = 40;\n\nbool pullup = false;\n\nbool invert = false;\n\nEasyButton powerButton(PWR_BTN_PIN, debounce, pullup, invert);\n")),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:"center"}),"Argument"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:"center"}),"Data Type"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:"center"}),"Required?"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:"center"}),"Default Value"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:"center"}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:"center"}),"pin"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:"center"}),"uint8_t"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:"center"}),"yes"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:"center"}),"n/a"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:"center"}),"Arduino pin number where the button is connected.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:"center"}),"debounce_time"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:"center"}),"uint32_t"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:"center"}),"no"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:"center"}),"35"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:"center"}),"Period of time to make sure the pushbutton is definitely pressed. Please refer to ",Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"https://www.arduino.cc/en/tutorial/debounce"}),"debounce"),".")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:"center"}),"pullup_enable"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:"center"}),"bool"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:"center"}),"no"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:"center"}),"true"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:"center"}),"Enable internal pullup resistor. Please refer to ",Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"https://www.arduino.cc/en/Tutorial/DigitalPins"}),"digital pins"),". If using ESP32, please see the note below.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:"center"}),"invert"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:"center"}),"bool"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:"center"}),"no"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:"center"}),"true"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:"center"}),"Invert button logic. If true, low = pressed else high = pressed. Please refer to ",Object(r.b)("a",Object(a.a)({parentName:"td"},{href:"https://www.arduino.cc/en/Tutorial/Invert"}),"invert"),".")))),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"Note")),Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"If using ",Object(r.b)("strong",{parentName:"p"},"ESP32"),", be aware that some of the pins does not have software ",Object(r.b)("strong",{parentName:"p"},"pull-up"),"/",Object(r.b)("strong",{parentName:"p"},"pull-down")," functionalities. In that case, use an external pull-up resistor, 10K works well. Please refer to ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://learn.sparkfun.com/tutorials/pull-up-resistors"}),"Pull-up Resistors"),"."))),Object(r.b)("h2",{id:"initializing-a-button"},"Initializing a button"),Object(r.b)("p",null,"Initialize the button by calling the method ",Object(r.b)("inlineCode",{parentName:"p"},"begin")," within the ",Object(r.b)("inlineCode",{parentName:"p"},"setup")," function."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp"}),"void setup() {\n    powerButton.begin();\n}\n")),Object(r.b)("h2",{id:"update-button-state"},"Update Button State"),Object(r.b)("h3",{id:"poll"},"Poll"),Object(r.b)("p",null,"Continuously read the state of the button."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp"}),"void loop() {\n    powerButton.read();\n}\n")),Object(r.b)("h3",{id:"external-interrupts"},"External interrupts"),Object(r.b)("p",null,"Defining interruption service routine"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp"}),"void buttonISR()\n{\n  //When button is being used through external interrupts, parameter INTERRUPT must be passed to read() function\n  powerButton.read(INTERRUPT); \n}\n")),Object(r.b)("p",null,"Enabling external interrupt"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp"}),"if (powerButton.supportsInterrupt())\n  {\n    powerButton.enableInterrupt(buttonISR);\n  }\n")),Object(r.b)("h2",{id:"callbacks"},"Callbacks"),Object(r.b)("p",null,"EasyButton allows you to attach callback functions to certain button events. Use callback functions to run specific code when the event gets triggered. Attach callback functions within the setup function."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp"}),'void onPressed() {\n  Serial.println("Power button has been pressed!");\n}\n\nvoid setup() {\n    // onPressed function will be called when the onPressed event of the button gets triggered.\n    powerButton.onPressed(onPressed);\n}\n')))}o.isMDXComponent=!0},131:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return O}));var a=n(0),r=n.n(a);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function b(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?b(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):b(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},c=Object.keys(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=r.a.createContext({}),u=function(e){var t=r.a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l({},t,{},e)),n},p=function(e){var t=u(e.components);return r.a.createElement(o.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,c=e.originalType,b=e.parentName,o=i(e,["components","mdxType","originalType","parentName"]),p=u(n),d=a,O=p["".concat(b,".").concat(d)]||p[d]||s[d]||c;return n?r.a.createElement(O,l({ref:t},o,{components:n})):r.a.createElement(O,l({ref:t},o))}));function O(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var c=n.length,b=new Array(c);b[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,b[1]=l;for(var o=2;o<c;o++)b[o]=n[o];return r.a.createElement.apply(null,b)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);